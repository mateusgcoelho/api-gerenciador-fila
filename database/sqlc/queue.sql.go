// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queue.sql

package database

import (
	"context"
)

const createQueue = `-- name: CreateQueue :one
INSERT INTO queues (name)
VALUES ($1) RETURNING id, name, actual_number, created_at, updated_at
`

func (q *Queries) CreateQueue(ctx context.Context, name string) (Queue, error) {
	row := q.db.QueryRow(ctx, createQueue, name)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActualNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQueues = `-- name: GetQueues :many
SELECT id, name, actual_number, created_at, updated_at FROM queues
LIMIT $1 OFFSET $2
`

type GetQueuesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetQueues(ctx context.Context, arg GetQueuesParams) ([]Queue, error) {
	rows, err := q.db.Query(ctx, getQueues, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Queue{}
	for rows.Next() {
		var i Queue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ActualNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
