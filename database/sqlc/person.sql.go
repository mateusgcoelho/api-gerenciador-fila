// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: person.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO persons (name, phone, cpf)
VALUES ($1, $2, $3) RETURNING id, name, phone, cpf, created_at, updated_at
`

type CreatePersonParams struct {
	Name  string      `json:"name"`
	Phone pgtype.Text `json:"phone"`
	Cpf   pgtype.Text `json:"cpf"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson, arg.Name, arg.Phone, arg.Cpf)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, phone, cpf, created_at, updated_at FROM persons WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPerson(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRow(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPersons = `-- name: GetPersons :many
SELECT id, name, phone, cpf, created_at, updated_at FROM persons
LIMIT $1 OFFSET $2
`

type GetPersonsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPersons(ctx context.Context, arg GetPersonsParams) ([]Person, error) {
	rows, err := q.db.Query(ctx, getPersons, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Person{}
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Cpf,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
